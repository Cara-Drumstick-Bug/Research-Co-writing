https://hackmd.io/J3YASQSATSGPpk38qpm3jw

很像敏捷接案的方式

Scrum 每周內部測試、兩週交付 ( 展示 ) 成果一次 依每次回饋 敏捷調整

可能做到機車，客戶覺得滿足需求就不用做到汽車

可以在前幾包小 incremain 次類似暖機配合的感覺

https://www.scrum.org/open-assessments/scrum-open

Scrum 理念的創始人的認證機構

packge scan 資安掃描 Nuget Package => whitesource bolt

https://www.ithome.com.tw/news/127525

github flow 感覺比 git flow 簡單 ?

Azure DevOps Boards 可以關聯 Git 分支，感覺也是蠻好用的，但就要全綁在 Azure

接著 Repo Pull Request ，可以讓主管去卡控 marge 可以間接 Code Review，也可自動

分支越少越短越好，且要越早解決衝突越好，所以 Github flow 相較會更好

Artifact => build 後的結果

環境差異 Dev Test Staging Production 四份程式碼，可以透過 Feature toggles ? ... UI 權限隱藏 = = ... ????

喔喔 所以 DI 的功用就出現了 !!!

或 app configration ? app setting = = Azure 版本的 Online Config ...

因應 => 單一環境 => 微服務環境 => 容器化技術進步，瞬間容量要求成長 

TBD https://www.itread01.com/hkyfeii.html

= = 要做 PR => Code Review 不如做，極限編成

https://zh.wikipedia.org/zh-tw/%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B

重構 單元測試 CodeReview => 短期減少生產力，長期則

TBD => 只有 Master 靠 CI 錯誤不布板不怕程式碼死掉
